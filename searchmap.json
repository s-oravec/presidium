[{"id":"content/_overview/01-features.md","title":"Features","slug":"features","url":"/overview/#features","section":"Overview","category":"","content":"Presidium is an open-source software documentation creation system for Agile teams and their users.\n\nPresidium is easy to install and configure, supports flexible content authoring and publishing workflows, and includes predefined article templates to quickly get you up and running.  A team can use Presidium to:\n\nDevelop new content\n\nRapidly re-purpose existing content\n\nRe-use existing marked-up code (jsdoc, javadoc) and API specifications (Swagger)\n\nPresidium provides the features you need without the bloat of many commercial solutions:\n\nAutomatic menus\n\nThe left navigation menu is dynamically created every time you publish your site. Various options are available to control navigation behavior.\n\nVersioning\n\nSupport for multiple documentation versions. You can easily switch between versions without losing context.\n\nMarkup Ingestion\n\nIngestion of markedup source code and API specs allow you to reuse existing documentation investments.\n\nFiltering by Role\n\nDefine user roles and filter site content by a specific selected role.\n\nLink Checking\n\nMake sure your links actually go somewhere!\n\nArticle Status Tracking\n\nTrack the status of an article and manage simple authoring workflow.\n\nThemes\n\nEasily select and modify Bootswatch themes that meet your brand requirements.\n\nPresidium was created by SPAN Digital and is licensed under Apache 2.0\n","updated":"2018-02-27T12:16:15.586Z","roles":[]},{"id":"content/_overview/02-benefits.md","title":"Benefits","slug":"benefits","url":"/overview/#benefits","section":"Overview","category":"","content":"Easy Installation\n\nPresidium uses Github pages to publish content. If you have access to Github and Github Pages is turned on for your site, you have everything you need. All you need to do it write your content and commit changes, and your content is published automatically. It's really that easy.\n\nMicro-article Based\n\nPresidium is built on sound theoretical strategies for developing learning content and managing knowledge assets. The core of this approach is the development of specific focused micro-articles that explain individual concepts. This splits the problem of content development into two parts:\n\nDefining a site outline based on the concepts that must be documented and how they should be sequenced and presented.\n\nDeveloping articles that each explain each concept, using a standard template to ensure consistency.\n\nMicro-articles break the documentation development and maintenance activities into manageable chunks that can be prioritized based on need. In many cases, it's possible to write and review an article in under 20 minutes.\n\nThis Presidium documentation site not only explains the Presidium software but also includes best practice guidelines for writing your documentation.\n\nEasy Content Maintenance\n\nPresidium is designed to make it easy to write and maintain your documentation. Instead of a monolithic document, Presidium manages a directory structure of micro-articles. The directory structure maps to the sections of your site, while the articles are joined together to build the content of each section. You can create a directory to add new sections and sub-sections. Each section contains a sample article template you can use as a starting point when creating new content. This site explains other best practices for writing articles.\n\nIf you know how to  maintain a codebase in a Github repository, you already know how to maintain Presidium documentation. You can use your team's current Github workflow to manage the approval and publication process and use Githubâ€™s features to handle merge conflicts and other issues, just as you do for your source code.\n\nConfigurable Features\n\nPresidium is shipped pre-configured for software documentation. You can easily modify the suggested site structure and behavior. Most teams only need to remove a few sections that are not relevant to their project. Presidium has several configurable features that can be enabled as needed.\n\nServerless\n\nPresidium uses Github for both content management and as a publication server. If you have access to Github and Github pages is turned on for your repository, then you have all you need to start publishing. You don't need to deploy a server or get permission from some dark corner of the enterprise. All you need to do is commit the branch that contains your documentation and Github pages using Jekyll, and Presidium will do the rest.\n\nDespite having no server, there are enough features in the Presidium.js component to meet the needs of most teams. But, if you really need more features, Presidium is open-source and we welcome contributions from the community.\n","updated":"2018-02-27T12:16:15.606Z","roles":[],"author":"virtualtraveler"},{"id":"content/_key-concepts/01-inside-presidium.md","title":"Inside Presidium","slug":"inside-presidium","url":"/key-concepts/#inside-presidium","section":"Key Concepts","category":"","content":"At its core, Presidium is a static website generator built on Jekyll that includes React components for features such as navigation and search. This model enables users to publish their content quickly and painlessly. Being static simplifies publication - you don't need to provision a server and can host your documentation in a matter of seconds on Github Pages or Bitbucket.\n\nPresidium is more than a framework. It's a framework built around a process. And, yes it's opinionated, but it's informed too - who wants to spend time documenting code? Software documentation that doesn't suck is not just a tagline.\n","updated":"2018-02-27T12:16:15.613Z","roles":[]},{"id":"content/_key-concepts/02-supporting-learning-objectives.md","title":"Presidium's Learning Model","slug":"presidiums-learning-model","url":"/key-concepts/#presidiums-learning-model","section":"Key Concepts","category":"","content":"Presidium is more than a framework for producing documentation. It asks you to think about, structure, author, and publish content based on sensible best practices so you can write effective documentation, rather than producing documentation for documentation's sake.\n\nSupporting Learning Objectives & Efficiency\n\nPresidium recommends creating small 'micro' articles that convey enough information to fulfill a learning objective. Small articles are advantageous because they:\n\nUsually only require a single author\n\nForce the author to focus on effectively describe a single concept\n\nEnable authors to quickly add documentation while also working on a product or service.\n\nUsing this method, creating high quality content is part of the engineering process, not a deferred or protracted task.\n\nCategorization\n\nOften, either only a few people hold all the critical business and technical knowledge or information is spread across documents without organization or cohesion.\n Presidium suggests a way to categorize information that helps the writer compartmentalize and categorize knowledge, leading to more cohesive and logical documentation.\n\nOverview & Key Concepts\n\nAlmost any knowledge base requires an overview to orient the reader in the correct domain. The Overview section should support and lead to a discussion of key concepts that prime the reader to use the rest of the content. These two sections are naturally presented first, and one should follow the another.\n\nPrerequisites & Getting Started\n\nFor software projects, APIs, and similar documentation, most readers will require some initial preparation. This may include installing libraries or binaries and reading information before proceeding.\n\nThe Prerequisites section should support the information in Getting Started. The Getting Started section should be a quick deep-dive than enables a user to get from nowhere to running in minutes.\n\nBest Practices\n\nThe Best Practices section should contain the ideal path to follow to get the most out of your product or service and reduce the potential of encountering problems. They can be a combination of anecdotal knowledge, RFCs, white papers etc.\n\nReference\n\nReferences should enhance or support the information in other sections (for example, imported API documentation, deep-dives beyond the needs of most readers, etc.).\n\nRecipes\n\nRecipes are clear sets of steps that explain how to do something useful or unusual with your product or service.\n\nGlossary\n\nGlossary entries are bite-sized pieces of information that explain a concept, resolve jargon, or list synonyms for a particular term. Because all content in the Glossary can be used for automatic tooltip generation, a good rule of thumb is to make sure a glossary entry can be condensed into a tooltip without being verbose or introducing confusion.\n\nMore\n\nTools, Uses Cases, Updates, and Support are other sections you can use. You can also define your own sections in Presidium.\n","updated":"2018-02-27T12:16:15.642Z","roles":[]},{"id":"content/_key-concepts/04-presidium-worklow.md","title":"Presidium Workflow","slug":"presidium-workflow","url":"/key-concepts/#presidium-workflow","section":"Key Concepts","category":"","content":"Presidium provides workflows templates and tools for building and managing a static technical documentation site.\nAs shown below, all user documentation for a system can be written in Markdown and built into a static site using\nPresidium:\n\nDocumentation Workflow\nHigh-level Workflow and Dependencies\n\nContent Owners\n\nWrite and structure their articles and user documentation in a git repo.\n\nInclude media assets (images, attachments) as required.\n\nInclude reference documentation sources as required.\n\nConfigure and publish their site.\n\nPresidium\n\nProvides:\n\nBase templates, styling, and themes\n\nCommon UI components\n\nBuild workflows via npm:\n\nImport\n\nBuild\n\nServe\n\nPublish\n\nVersion\n\nDependencies\n\nJekyll integration and workflows via npm\n\nReference documentation import:\n\nJavadoc\n\nSwagger\n\nJSDoc\n\nLinking and validation tools\n","updated":"2018-02-27T12:16:15.651Z","roles":[]},{"id":"content/_key-concepts/05-authoring-workflow.md","title":"Authoring Workflow","slug":"authoring-workflow","url":"/key-concepts/#authoring-workflow","section":"Key Concepts","category":"","content":"The following workflow is recommended for authoring content using Presidium.\n\nIdentify the Author\n\nWhether you're creating a single article or an entire section, make sure to include the author tag in the front matter.\n\nWork Locally\n\nPresidium encourages you to write and review documentation on your local machine, rather than making changes directly on Github. The advantages to this workflow are:\n\nChanges are immediately viewable\n\nYou can leverage Presidium's validation tools\n\nGit commit history will have less noise\n\nProtect Master\n\nIf you own the documentation project, make sure you prevent others from making commits or pushing to the Master branch. You will be publishing from the Master branch, so you want to maintain its integrity.\n\nWork On a Branch\n\nIf you're adding new content, start out on a branch based off of Develop.\n\nReview\n\nChanges should be submitted as Pull Requests. Review all changes and merge into your Develop branch, then tag the release as a release for verification.\n\nTag, Release & Publish\n\nAfter you've finalized the new content, merge it into Master, tag it as a release, then publish to Github pages.\n","updated":"2018-02-27T12:16:15.660Z","roles":[]},{"id":"content/_key-concepts/05-markdown.md","title":"Efficient Authoring With Markdown","slug":"efficient-authoring-with-markdown","url":"/key-concepts/#efficient-authoring-with-markdown","section":"Key Concepts","category":"","content":"Markdown is an ubiquitous, lighweight markup language known to almost any engineer. If you don't know Markdown, it's easy to learn. Presidium uses a version of Markdown known as Github Flavoured Markdown and leverages this 'common tongue' to enable multiple contributors to create documentation quickly without wasting time doing point & click styling or having to alter HTML and CSS.\n\nStyle Guides\n\nFor any documentation project, a Markdown style guide ensures that contributors write documentation that is consistent with your intended tone and layout.\n\nFlexibility\n\nIf you need more flexibility than Markdown offers, you can also use HTML separately or mixed with Markdown content in articles.\n","updated":"2018-02-27T12:16:15.663Z","roles":[]},{"id":"content/_key-concepts/06-saving-you-time.md","title":"Time Saving Features","slug":"time-saving-features","url":"/key-concepts/#time-saving-features","section":"Key Concepts","category":"","content":"Presidium includes tools to make it easier to compose, verify, and publish your documentation.\n\nImporters\n\nPresidium supports the automatic ingestion of the following into your documentation project:\n\nJavadoc\n\nJsdoc\n\nSwagger\n\nRead more here.\n\nValidation\n\nLink Validation: Finds broken links in your documentation.\n\nPublishing & Versioning\n\nPublishing: A simple command line utility to build and publish your documentation on Github Pages or Bitbucket.\n\nVersioning: A way to easily provide multiple versions of your documentation.\n\nMore\n\nMany more features are in the pipeline!\n","updated":"2018-02-27T12:16:15.672Z","roles":[]},{"id":"content/_key-concepts/07-menu-stucture.md","title":"Menu Structure & Behavior","slug":"menu-structure-and-behavior","url":"/key-concepts/#menu-structure-and-behavior","section":"Key Concepts","category":"","content":"Structure\n\nFor simplicity and transparency, the menu structure and associated directory structure are the same.\n\nBehavior\n\nA significant feature of the menu is its tree structure: each section or subsection is a node and content traverses from each node through its children. In Presidium, the node â€˜nameâ€™ or title becomes the main header of the page. Everything outside of that sub-tree is not presented on the page. In this example, the user has clicked Content Structure. Everything under that section is displayed:\n\nContent Structure\n\nNote the URL: /recipes/content-structure/. When you click on a section or subsection title, the url is included in the path. If you click on an article in a subsection (for example, 'Article Concatenation'), the URL changes to /recipes/content-structure/#article-concatenation.\n","updated":"2018-02-27T12:16:15.674Z","roles":[]},{"id":"content/_prerequisites/01-required-software.md","title":"Required Software","slug":"required-software","url":"/prerequisites/#required-software","section":"Prerequisites","category":"","content":"The following tools are required to build and run your site locally:\n\nnpm v3.10+\n\nruby v2.1+\n\nbundler v1.14.3+\n\nPresidium uses:\n\nnpm to build, run and publish your site\n\nruby to run Jekyll \n\nbundler to manage Jekyll dependencies\n\nAll required dependencies are managed via npm scripts and are local to each site you create, so there is \nno need to install and configure Jekyll.\n","updated":"2018-02-27T12:16:15.681Z","roles":[]},{"id":"content/_prerequisites/02-environment-setup/01-osx.md","title":"OSX","slug":"osx","url":"/prerequisites/local-environment-setup/#osx","section":"Prerequisites","category":"Local Environment Setup","content":"NPM\n\nInstall using the node package or nvm\n\nnode v6.10 (LTS)\n\nnpm v3.10\n\nRuby\n\nRequires ruby >= 2.1 available using homebrew:\n\n\n\nBundler\n\n\n","updated":"2018-02-27T12:16:15.684Z","roles":[]},{"id":"content/_prerequisites/02-environment-setup/02-debian.md","title":"Debian","slug":"debian","url":"/prerequisites/local-environment-setup/#debian","section":"Prerequisites","category":"Local Environment Setup","content":"The following script can be used to provision a Debian based environment:\n\n\n","updated":"2018-02-27T12:16:15.686Z","roles":[]},{"id":"content/_getting-started/00-download.md","title":"Download the Template","slug":"download-the-template","url":"/getting-started/#download-the-template","section":"Getting Started","category":"","content":"Download and extract the sample template.\n","updated":"2018-02-27T12:16:15.688Z","roles":[]},{"id":"content/_getting-started/01-install.md","title":"Install Required Dependencies","slug":"install-required-dependencies","url":"/getting-started/#install-required-dependencies","section":"Getting Started","category":"","content":"Run the following from your project directory to install the required dependencies:\n\n\n\nIf you get an error, make sure you have the following prerequisites installed in your environment:\n\nnpm v3.10+\n\nruby v2.1+\n\nbundler v1.14.3+\n","updated":"2018-02-27T12:16:15.691Z","roles":[]},{"id":"content/_getting-started/02-run.md","title":"Run Presidium","slug":"run-presidium","url":"/getting-started/#run-presidium","section":"Getting Started","category":"","content":"Run the following from your project folder to start your site:\n\n\n\nThis will build your site to dist/site and serve it locally on: http&#x3A;//localhost:4000/\n","updated":"2018-02-27T12:16:15.692Z","roles":[]},{"id":"content/_getting-started/03-create.md","title":"Update Content","slug":"update-content","url":"/getting-started/#update-content","section":"Getting Started","category":"","content":"After your site is up and running, you can start making changes to the following files and folders:\n\ncontent/ Content folder for all your articles\n\nmedia/ Media folder for static assets such as images, attachments, or css\n\n\\_config.yml Site configuration properties\n\nUpdates to content, media, or css can be made without having to restart the local server. \nStructural or configuration changes to currently require a server restart.\n","updated":"2018-02-27T12:16:15.703Z","roles":[]},{"id":"content/_getting-started/04-host.md","title":"Publish your Site","slug":"publish-your-site","url":"/getting-started/#publish-your-site","section":"Getting Started","category":"","content":"Presidium builds a static website in the dist/site directory which may be hosted by any web server.\n\nIf you are using Github or Bitbucket to manage your documentation, you may choose to use Github Pages or Bitbucket to quickly and easily publish your documentation online.\n","updated":"2018-02-27T12:16:15.704Z","roles":[]},{"id":"content/_best-practices/01-plan-content-development.md","title":"Plan Content Development","slug":"plan-content-development","url":"/best-practices/#plan-content-development","section":"Best Practices","category":"","content":"Before you write any content, spend some time anticipating what tasks you need to perform and make sure you have the time and resources to achieve your goals.\n\nThe following steps work for both small and large projects:  \n\nDesign the site structure\n\nInventory existing content\n\nPlan the conversion of existing content into articles\n\nMap the planned articles to your structure\n\nIdentify required new articles\n\nRepurpose existing content into articles\n\nWrite new articles\n\nProofread and edit\n\nPublish  \n\nDiscussion\n\nThe most important planning task is identifying the scope of your documentation efforts and understanding the needs of your audience.\n\nPresidium is pre-configured with a set of standard sections that are commonly used in software documentation. You can use this framework when starting to scope your project.\n","updated":"2018-02-27T12:16:15.711Z","roles":[],"author":"virtualtraveler"},{"id":"content/_best-practices/02-design-site-structure.md","title":"Design Documentation Structure","slug":"design-documentation-structure","url":"/best-practices/#design-documentation-structure","section":"Best Practices","category":"","content":"Before starting to write content, you should define the documentation structure to answer questions such as:\n\nHow many sections do I need?\n\nWhat should each section cover?\n\nDo some sections need sub-sections?\n\nAnswering these and other questions will help you scope the project and define the content that needs to be found or written.\n\nKeep in mind that although you should decide on the structure of your site at the beginning, you might need to make changes as you gain a deeper understanding of the content. With Presidium, it's easy to change the structure by moving articles.\n\nPresidium is pre-configured with a standard menu structure that you can use to start scoping your documentation. You can add new sections but in most cases, the standard sections will suffice.\n\nReview the following table to decide which of the pre-configured sections you will need:\n\n\n\nDiscussion\n\nAfter you have identified the sections you want to use for your documentation, define and compile a list of the learning objectives for each section.\n","updated":"2018-02-27T12:16:15.731Z","roles":[],"author":"virtualtraveler"},{"id":"content/_best-practices/03-define-learning-objectives.md","title":"Define Learning Objectives","slug":"define-learning-objectives","url":"/best-practices/#define-learning-objectives","section":"Best Practices","category":"","content":"When defining learning objectives, think carefully about what it means to use your solution effectively by doing the following:\n1\\. Identify what your audience should know and be able to do after they have read the documentation.\n2\\. Use that information to create a list of learning objectives.\n\nJust as stories are used to define software, learning objectives can be written using a standard template.   \n\nAs a user of the solution I know a specific piece of information or can perform a specific task\n\nOften, existing stories can be converted into learning objectives with little or no alteration:\n\nAs a first time user of Presidium I can easily download, install, and run the latest version.\n\nAs a Presidium user, I know the value of defining learning objectives for developing comprehensive content.\n\nClearly worded learning objectives enable you to focus the content on comprehensive and coherent goals.\nLearning objectives should be evident in the title and content of articles. Often, one learning objective corresponds to one content article.   \n\nDiscussion\n\nDefine the knowledge and skill set of your target audience before starting  your documentation. Use this information to avoid wasting time explaining information your audience already knows.\n\nAs a user of Presidium I already know how to use Github as a version control system.\n\nAs a user of Presidium, I know what Markdown is, I have used it before, and I know how to look up details about Markdown syntax I may not know.  \n","updated":"2018-02-27T12:16:15.744Z","roles":[],"author":"virtualtraveler"},{"id":"content/_best-practices/04-inventory-existing-content.md","title":"Inventory Existing Content","slug":"inventory-existing-content","url":"/best-practices/#inventory-existing-content","section":"Best Practices","category":"","content":"When starting a new documentation project, you should first review and evaluate existing content. Content from multiple sources, such as those listed below, can be repurposed:\n\nExisting software documentation\n\nWikis and message boards\n\nDesign documents\n\nWork tickets (epics and stories, bugs)\n\nAPI specifications  \n\nREADME files\n\nCode comments and markup\n\nHelp files\n\nEmails\n\nMeeting notes\n\nProject planning materials\n\nBefore starting:\n1\\. Compile a list of existing content sources.\n2\\. Identify how each item could be decomposed or converted into an article.\n3\\. Identify where these articles can fit in your documentation structure.\n\nDiscussion\n\nIf there is no existing documentation set, some areas will be well documented, while others will either be poorly defined or missing. Expect to find duplicate and outdated content. Maintain a list of the best documentation you find for any learning objective.  \n","updated":"2018-02-27T12:16:15.762Z","roles":[],"author":"virtualtraveler"},{"id":"content/_best-practices/05-use-article-templates.md","title":"Use Article Templates","slug":"use-article-templates","url":"/best-practices/#use-article-templates","section":"Best Practices","category":"","content":"Presidium includes article templates for each of the pre-defined sections. Templates are text documents that contain instructions and Markdown which can be modified to meet your needs.\n\nFor example, here is the template for the Best Practices section:\n\n\n\nDiscussion\n\nTemplates encourage consistency and provide a simple checklist that an author can use for inspiration.\n","updated":"2018-02-27T12:16:15.767Z","roles":[],"author":"virtualtraveler"},{"id":"content/_best-practices/06-write-effective-articles.md","title":"Writing Effective Articles","slug":"writing-effective-articles","url":"/best-practices/#writing-effective-articles","section":"Best Practices","category":"","content":"Anyone can write great articles if they follow a few simple style guidelines:\n\nMake sure the title explains what the article is about. The title will be used to construct the navigation menu and will often be separated from the article body along side other article titles.\n\nMake sure the title works its own and describes the essence of the article.\n\nKeep titles simple and succinct without using humor or colloquialisms.  \n\nHave one author for every article. This enable authors to quickly add documentation while also working on a product or service.\n\nDiscussion\n\nArticles should convey enough information to fulfill a learning objective.\n","updated":"2018-02-27T12:16:15.770Z","roles":[],"author":"virtualtraveler"},{"id":"content/_reference/01-configuration.md","title":"Configuration","slug":"configuration","url":"/reference/#configuration","section":"Reference","category":"","content":"This is a sample Presidium configuration file:\n\n\n","updated":"2018-02-27T12:16:15.786Z","roles":[]},{"id":"content/_reference/02-theming.md","title":"Themes","slug":"themes","url":"/reference/#themes","section":"Reference","category":"","content":"Presidium uses http&#x3A;//bootswatch.com/ to manage themes. To change the\ntheme, navigate to /media/css/\\_sass and edit the \\_variables.scss file:\n\n\n\nPresidium includes the themes listed above. Uncomment the theme that you want and comment the selected one.\nWhen you call Presidium with npm start, it will pick up the change and (the hotloader) will update the \nstyles, allowing you view the new theme after refreshing the browser window.\n\nNote that if you want a pure spacelab theme for example, you must remove the overrides as shown above ($brand-info ... etc).\n\nLogo\n\nThe default logo image is placed and loaded from /media/images/logo.png.  To update it, replace\nthe existing file in the folder. Use the following size ratio:\n\n260px Ã— 124px\n","updated":"2018-02-27T12:16:15.798Z","roles":[]},{"id":"content/_reference/03-directories.md","title":"Directories","slug":"directories","url":"/reference/#directories","section":"Reference","category":"","content":"Articles are stored in the content directory.  Associated resources, such as images, are stored in the media directory. The package.json and \\_config.yml files are used to configure the project.\n\n\n\nAll content changes are monitored; any change triggers a regeneration of the content. After a structural change (for example, adding a sub-directory or new article) a restart is required.\n","updated":"2018-02-27T12:16:15.802Z","roles":[]},{"id":"content/_reference/04-frontmatter/01-frontmatter.md","title":"Overview","slug":"overview","url":"/reference/front-matter/#overview","section":"Reference","category":"Front matter","content":"Front Matter serves two purposes:\n\nIndicates that the file should be included as an article in the build process\n\nAllows you to set properties for your article\n\nFor example:\n\n{% raw %}\n\n\n\n{% endraw %}\n\nPresidium includes the following front matter variables:\n\n\n","updated":"2018-02-27T12:16:15.811Z","roles":[]},{"id":"content/_reference/04-frontmatter/02-authors.md","title":"Authors","slug":"authors","url":"/reference/front-matter/#authors","section":"Reference","category":"Front matter","content":"Every article can include an author in the front matter:\n\n\n\nOptional links to authors can be enabled by setting a base authors-url in the site config:\n\n\n\nTo hide or show authors on your generated site,\nenable or disable the component in the site config:\n\n\n","updated":"2018-02-27T12:16:15.814Z","roles":[]},{"id":"content/_reference/04-frontmatter/03-user-roles.md","title":"User Roles","slug":"user-roles","url":"/reference/front-matter/#user-roles","section":"Reference","category":"Front matter","content":"Various roles can be added to a site to allow readers to filter articles and menu items by a target audience.  \n\nThis optional feature can be enabled by defining user roles in the site config.\n\n\n\nIf a role is not specified, articles default to roles.all.\n\nArticles can have one or more roles defined in front matter:\n\n\n","updated":"2018-02-27T12:16:15.827Z","roles":[]},{"id":"content/_reference/04-frontmatter/04-statuses.md","title":"Statuses","slug":"statuses","url":"/reference/front-matter/#statuses","section":"Reference","category":"Front matter","content":"Each article can be assigned a status to track its lifecycle:\n\ndraft\n\nreview\n\npublished\n\nretired\n\nStatuses can be set in the site's front matter:\n\n\n\nTo show or hide statuses on your generated site, use the following setting in the site config:\n\n\n","updated":"2018-02-27T12:16:15.832Z","roles":[]},{"id":"content/_reference/05-markdown/00-headings.md","title":"Headings & Emphasis","slug":"headings-and-emphasis","url":"/reference/markdown/#headings-and-emphasis","section":"Reference","category":"Markdown","content":"Heading are indicated with a hash.\n\nHeading 1\n\n\n\nHeading 2\n\n\n\nHeading 3\n\n\n\nUse either bold, italics, or monospaced font styling for emphasis:\n\nItalicized text\n\n\n\nBold text\n\n\n\nIdentifiers and code\n\n\n","updated":"2018-02-27T12:16:15.842Z","roles":[]},{"id":"content/_reference/05-markdown/01-bullets-numbering.md","title":"Bullets & Numbering","slug":"bullets-and-numbering","url":"/reference/markdown/#bullets-and-numbering","section":"Reference","category":"Markdown","content":"Markdown allows bullets and numbering to be nested.\n\nUse bullets to list unordered items.\n\nBullets\n\nSentence 1.\n\nSentence 2.\n\nNested sentence 1.\n\nNested sentence 2.\n\nDouble nested sentence.\n\n\n\nNumbering\n\nUse a numbered list for steps that should be done in order. You can number the list yourself or have Presidium do the numbering automatically:\n\nOne\n\nTwo\n\nThree\n\nFour\n\nFive\n\nSix\n\n\n","updated":"2018-02-27T12:16:15.845Z","roles":[]},{"id":"content/_reference/05-markdown/02-links.md","title":"Links","slug":"links","url":"/reference/markdown/#links","section":"Reference","category":"Markdown","content":"You can link to internal articles in your repository, to external articles, or even to other semantically significant text.\nAny text enclosed in angle brackets will be interpreted as a link. If you want to add a description, use square brackets for the description and parenthesis for the link.\n\nInternal link: Presidium Authors\n\nExternal link: https&#x3A;//github.com/SPANDigital/presidium\n\nAlternative: Presidium on Github\n\n{% raw %}\n\n\n\n{% endraw %}\n","updated":"2018-02-27T12:16:15.854Z","roles":[]},{"id":"content/_reference/05-markdown/03-tables.md","title":"Tables","slug":"tables","url":"/reference/markdown/#tables","section":"Reference","category":"Markdown","content":"In Markdown\n\nMarkdown provides a simple syntax for creating tables using hyphens and horizontal bars / pipes.\n\n\n\nThis can be simplified by removing extra spaces, hyphens, and bars.\n\nIn HTML\n\nMarkdown tables support single-line cells. For multi-line content, use an HTML table.\n\n\n","updated":"2018-02-27T12:16:15.862Z","roles":[]},{"id":"content/_reference/05-markdown/04-blockquotes.md","title":"Blockquotes","slug":"blockquotes","url":"/reference/markdown/#blockquotes","section":"Reference","category":"Markdown","content":"Unusual content can be included in blockquotes, which always begin with a closed angle bracket. In these examples, the Bootstrap Glyphicons provided by Jekyll have been used to embellish the text.\n\nThis is a blockquote\n\nList in blockquote\n\n Note!\n\nList in blockquote\n\n\n\nOther Examples\n\n TODO:\n\n http&#x3A;//my/url/\n\n Decision Point:\n\n Example:\n\n IMPORTANT:\n\nGlyphs List\n\n\n","updated":"2018-02-27T12:16:15.874Z","roles":[]},{"id":"content/_reference/05-markdown/05-code-blocks.md","title":"Code Blocks","slug":"code-blocks","url":"/reference/markdown/#code-blocks","section":"Reference","category":"Markdown","content":"To add code blocks to your content, enclose the code with three backticks. For syntax highlighting, set the language directly after the first set of backticks.\nAlternatively, you can indent your code / machine output to treat it as preformatted text. For single line inline code, use a single backtick.\n\nJavascript\n\n\n\nPython\n\n\n\nC\n\n\n\nOthers\n\nGithub-flavoured Markdown supports many languages for code blocks. For a full list, go to Github.\n","updated":"2018-02-27T12:16:15.878Z","roles":[]},{"id":"content/_reference/05-markdown/06-images.md","title":"Images","slug":"images","url":"/reference/markdown/#images","section":"Reference","category":"Markdown","content":"Image Links\n\nFully Resolved\n\nPut any images you want to include in the &lt;project root>/media/images directory and reference them in the text. Note the exclamation point.\nThe image path may be fully resolved:\n\n{% raw %}\n\n\n\n{% endraw %}\n\nBaseurl\n\nOr templated using the baseurl property defined in your site config:\n\n{% raw %}\n\n\n\n{% endraw %}\n\nCustom Property\n\nOr templated using a custom property defined in your site config:\n\n\n\n{% raw %}\n\n\n\n{% endraw %}\n\nCaptions\n\nTo include a caption, add  \\*Caption\\* after an image link. For example:\n\n{% raw %}\n\n\n\n{% endraw %}\n\nSample Image With Caption\nSample Image With Caption\n","updated":"2018-02-27T12:16:15.888Z","roles":[]},{"id":"content/_reference/05-markdown/07-tooltips.md","title":"Tooltips","slug":"tooltips","url":"/reference/markdown/#tooltips","section":"Reference","category":"Markdown","content":"Tooltips display a short definition of an item. There are two ways to create tooltips:\n\nAutomatically from the Glossary\n\nVia a link override\n\nAutomatic Tooltips\n\nAutomatic tooltips reference Glossary entries. If a Glossary article by the name of \"Tooltips\" exists, a tooltip will be available for the following item:\n\nTooltips\n\n\n\nLink Override\n\nYou can use an internal article as the source of a tooltip. Presidium will use the first paragraph of the article to construct the tooltip, so you should make sure the text will work as a tooltip. Note that the text used for the demarcation of a tooltip does not need to match the article title, like this, which links to an article on templates.\n\n{% raw %}\n\n\n\n{% endraw %}\n","updated":"2018-02-27T12:16:15.896Z","roles":[]},{"id":"content/_reference/06-landing-page.md","title":"Landing Page","slug":"landing-page","url":"/reference/#landing-page","section":"Reference","category":"","content":"Configure\n\nIf you want your documentation to have a landing page, edit your \\_config.yml, so that no section has / as its url.\n\nChange this:\n\n\n\nto this:\n\n\n\nCreate a Landing Page\n\nIn the root of ./content, add a file called index.html. The example below is an excerpt from Presidium's landing page. Note the front matter at the top which is required for paths to be rendered correctly.\n\n{% raw %}\n\n\n\n{% endraw %}\n\nCreate & Resolve Links\n\nCreate links to content and resolve them by including the baseurl in the path:\n\n{% raw %}\n\n\n\n{% endraw %}\n","updated":"2018-02-27T12:16:15.908Z","roles":[]},{"id":"content/_reference/08-importers/00-reference-documentation.md","title":"Importing Documentation","slug":"importing-documentation","url":"/reference/importers/#importing-documentation","section":"Reference","category":"Importers","content":"The Reference section of Presidium should be reserved as a low-level reference for users.\nTypical components documented in the Reference section may include a client library or API specification.\nThe process of importing documentation involves parsing a reference source and generating articles that are included in the generated site.\n\nWhere possible, reference documentation should be generated to ensure that your documentation is in sync with the\nsystem being documented.\n\nPresidium supports the following documentation sources:\n\njavadoc comments\n\njsdoc comments\n\nswagger api\n\nFor other sources that do not yet have an importer, documentation can be embedded into references.\n","updated":"2018-02-27T12:16:15.917Z","roles":[]},{"id":"content/_reference/08-importers/01-javadoc.md","title":"Javadoc","slug":"javadoc","url":"/reference/importers/#javadoc","section":"Reference","category":"Importers","content":"Presidium can import Java source code comments using the Presidium Doclet implementation.\nImported documentation will be included in the menu and sitemap.\n\nTo import javadoc, use the presidium-javadoc package.\n\nAdd the presidium-javadoc dependency to your site's package.json.\n\nAdd a generation script that parses the provided &lt;src-path> directory and &lt;packages> and generates Markdown in your content/\\_reference section.\n\nRun npm run import-javadoc-api when you need to update your source documentation.\n\n\n\nThe following options are available to presidium-javadoc:\n\n\n\nAlternatively, you can use the Doclet within an existing build workflow such as gradle using the javadoc-plugin.\n","updated":"2018-02-27T12:16:15.927Z","roles":[]},{"id":"content/_reference/08-importers/02-jsdoc.md","title":"Jsdoc","slug":"jsdoc","url":"/reference/importers/#jsdoc","section":"Reference","category":"Importers","content":"Presidium includes a template-based tool, presidium-jsdoc, based off of Jsdoc) to import Javascript comments into your Presidium documentation.\n\nAdd the presidium-jsdoc dependency to your site's package.json or run npm install --save presidium-jsdoc.\n\nAdd a script that invokes the tool.\n\nRun npm run import-jsdoc whenever you need to update your API documentation.\n\n\n\nExample:\n\n\n\nThe following options are available to presidium-jsdoc:\n\n\n","updated":"2018-02-27T12:16:15.932Z","roles":[]},{"id":"content/_reference/08-importers/03-swagger.md","title":"Swagger","slug":"swagger","url":"/reference/importers/#swagger","section":"Reference","category":"Importers","content":"Presidium includes a Java-based tool (presidium-swagger, based on Swagger2Markup) to import your API's Swagger into your Presidium documentation.\n\nAdd the presidium-swagger dependency to your site's package.json or run npm install --save presidium-swagger.\n\nAdd a script that invokes the tool.\n\nRun npm run import-swagger whenever you need to update your API documentation.\n\n\n\nExample:\n\n\n\nThe following options are available for presidium-swagger:\n\n\n","updated":"2018-02-27T12:16:15.940Z","roles":[]},{"id":"content/_reference/08-importers/04-embed.md","title":"Embed","slug":"embed","url":"/reference/importers/#embed","section":"Reference","category":"Importers","content":"A fallback approach to importing generated documentation is to embed documentation in an iframe.\nThis approach is not recommended because items are not indexed or available on the main menu. However, it\nwill work for certain cases when an importer is not yet available.\n\nWhen possible, use a simple template when embedding documentation in an iframe.\n\nTo include documentation in an iframe:\n1\\. Generate the static site documentation for your component.\n1\\. Put the documentation in the /media folder so that it's statically served.\nThe Presidium convention is to place it under /media/import/{my-reference}.\n1\\. Add a reference article to the Reference section:\n\n\n\nYou can create multiple Markdown files for different components as required.\n","updated":"2018-02-27T12:16:15.943Z","roles":[]},{"id":"content/_recipes/01-source-control/01-approaches.md","title":"Approaches","slug":"approaches","url":"/recipes/source-control/#approaches","section":"Recipes","category":"Source Control","content":"Presidium content can be managed in various ways depending on your project needs. Content may be hosted in:\n\nA dedicated repo that only contains documentation\n\nA sub-folder of an existing repo\n\nA git sub-module of an existing repo\n\nA dedicated repo is simpler to configure and easier to manage independently. Managing content within in a sub directory inside the a source code repo keeps everything in one place and makes it easier to update the documents while changing the code. A sub-module may be the best of both worlds, but is slightly more complex to manage.\n","updated":"2018-02-27T12:16:15.945Z","roles":[]},{"id":"content/_recipes/01-source-control/02-sub-folder.md","title":"Sub Folder","slug":"sub-folder","url":"/recipes/source-control/#sub-folder","section":"Recipes","category":"Source Control","content":"Presidium can exist within a sub-folder of an existing source code repository, for example, /docs.\n\nGetting Presidium\n\nThe easiest way to incorporate Presidium into your project is to get the latest archived version and uncompress it into your project's empty /docs folder.  If you would rather clone the project, make sure you remove the .git folder from docs/ after cloning because your project repo will manage\nthe docs/ folder and not the Presidium template repo.\n\nThe contents of your docs/ folder should look something like this:\n\n\n\nAdd the following to your project's .gitignore file:\n\n\n\nFrom this point on, you can follow instructions in the Getting Started section. The only difference is that your documentation root is /docs.\n","updated":"2018-02-27T12:16:15.947Z","roles":[]},{"id":"content/_recipes/01-source-control/03-sub-module.md","title":"Sub Module","slug":"sub-module","url":"/recipes/source-control/#sub-module","section":"Recipes","category":"Source Control","content":"If you want to store your documentation in a separate repository but still use it within your project, you can use Git submodules:\n\n\n","updated":"2018-02-27T12:16:15.948Z","roles":[]},{"id":"content/_recipes/02-documentation-structure/00-directory-structure.md","title":"Directory Structure","slug":"directory-structure","url":"/recipes/content-structure/#directory-structure","section":"Recipes","category":"Content Structure","content":"The site structure generated by Presidium follows the directory structure of the Presidium repository. Sections and articles are arranged in the operating system's default ordering of files and directories. Sections can be nested up to four levels deep, although we recommend only using one or two levels of nesting to make it easier to find content.\n\nThe following is an example of how you can order and organize files and directories using numeric prefixes:\n\n\n\nThe directory and filenames are used for sorting; they are generally not displayed in the generated site. To make it easier to edit and arrange your content, we recommend that the filename contains the title of the article and the directory name contains the name of the section.  \n\nThe title of a sub-section should be set by providing  an index.md file in the folder with the following front matter:\n\n\n\nIf no index file is provided, the directory name is used as the section name.\n","updated":"2018-02-27T12:16:15.949Z","roles":[]},{"id":"content/_recipes/02-documentation-structure/01-article-concatenation.md","title":"Article Concatenation","slug":"article-concatenation","url":"/recipes/content-structure/#article-concatenation","section":"Recipes","category":"Content Structure","content":"When a Presidium user makes a selection from the  left menu, all articles in that section are concatenated onto a single page. This allows readers to easily scroll through all articles in a section. This is a useful because adjacent articles in a section are typically related.  \n\nThis behavior is enabled by default, but can be disabled using the following site config:\n\n\n","updated":"2018-02-27T12:16:15.950Z","roles":[]},{"id":"content/_recipes/02-documentation-structure/02-exporting-articles.md","title":"Generating Article HTML","slug":"generating-article-html","url":"/recipes/content-structure/#generating-article-html","section":"Recipes","category":"Content Structure","content":"It can be useful to access an article's html without the navigation menu or headers and footers. This enables you to easily embed articles in other sites and systems.\n\nWhen building a site, you can set whether the html for each article is generated separately.\nTo generate html for all articles in a section, set the export-articles property in the site config:\n\n\n\nIn this example, when export-articles is set to true, the generated site will include html files for all articles in the Glossary section:\n\n\n","updated":"2018-02-27T12:16:15.951Z","roles":[]},{"id":"content/_recipes/03-hosting/01-gh-pages.md","title":"Github Pages","slug":"github-pages","url":"/recipes/hosting/#github-pages","section":"Recipes","category":"Hosting","content":"Github Pages provides a quick and convenient means of hosting and serving your documentation from a Github repository.\n1\\. Checkout the branch that you would like to publish from.\n1\\. Commit and push all your changes to your Github repository.\n1\\. Run npm run gh-pages to build and push a generated site to a gh-pages branch in your repository.\n1\\. You will need to enable gh-pages \nin your repository settings to make your documentation available online.\n1\\. You may host your documentation using a custom domain. Setting the cname property in your \\_config.yml exports your custom domain with your generated site. \n","updated":"2018-02-27T12:16:15.953Z","roles":[]},{"id":"content/_recipes/03-hosting/02-bitbucket.md","title":"Bitbucket","slug":"bitbucket","url":"/recipes/hosting/#bitbucket","section":"Recipes","category":"Hosting","content":"Bitbucket hosting is provided by setting up a separate repository to host your generated site. To serve your content on Bitbucket:\n\nCreate a hosting repository named &lt;your username>.bitbucket.io or &lt;your team name>.bitbucket.io.\n\nBuild the static site: npm run build\n\nCopy the generated site from dist/site to the hosting repository and push to Bitbucket\n\nThe content will be served from: &lt;your username>.bitbucket.io or &lt;your team name>.bitbucket.io \n\nCustom domain names are currently not supported by Bitbucket by Bitbucket.\n","updated":"2018-02-27T12:16:15.955Z","roles":[]},{"id":"content/_recipes/03-hosting/03-custom-hosting.md","title":"Custom Hosting","slug":"custom-hosting","url":"/recipes/hosting/#custom-hosting","section":"Recipes","category":"Hosting","content":" \nA common use case is to build Presidium documentation using a continuous integration environment. The generated website can be served by a web host of your choice depending on your particular requirements. \n\nRunning npm run build will build tHe generated static website in the dist/site directory. This may be copied over and served by any host such as Apache HTTP, Nginx or an AWS S3.\n","updated":"2018-02-27T12:16:15.956Z","roles":[]},{"id":"content/_recipes/04-semantic-versioning/01-setup.md","title":"Setup","slug":"setup","url":"/recipes/versioning/#setup","section":"Recipes","category":"Versioning","content":"Presidium supports semantic versioning of your documentation when publishing to Github pages.\n\nGithub Pages\n\nPresidium versioning relies on the use of the gh-pages branch to publish current and versioned documentation.\n\nTo use Presidium versioning, you will need to make you sure have a  gh-pages branch set up in your repository.\nSkip these steps if you already have a branch set up.\n\nChange the directory to the root of your project:\n\n\n\n$ git push origin --delete gh-pages\n$ git branch -D gh-pages\n\n\n\nUpdate .gitignore\n\nPresidium uses a hidden folder as a staging area for publishing. To make sure you don't accidentally commit this folder, run the following command:\n\n\n","updated":"2018-02-27T12:16:15.958Z","roles":[]},{"id":"content/_recipes/04-semantic-versioning/02-configure.md","title":"Configure","slug":"configure","url":"/recipes/versioning/#configure","section":"Recipes","category":"Versioning","content":"Update Variables in \\_config.yml\n\nPresidum supports the use of simple variables in \\_config.yml. To use versioning, you must make sure that any helper variables that include the base url of your site are defined using a ${...} variable.\n\nFor example, this is correct:\n\n\n\nThis is incorrect:\n\n\n\nMake sure you don't introduce circular dependencies when using variables.\n\nSet the Base URL & Turn on Versioning\n\nTo use Presidium versioning on gh-pages, you must use the base url of the repository. Make sure that this is set in \\_config.yml in the root of your project. (Note the lack of a trailing slash.)\n\n\n","updated":"2018-02-27T12:16:15.960Z","roles":[]},{"id":"content/_recipes/04-semantic-versioning/03-run.md","title":"Run","slug":"run","url":"/recipes/versioning/#run","section":"Recipes","category":"Versioning","content":"To publish a specific version:\n\n\n\nTo publish the latest version:\n\n\n\nVersioning Conventions\n\nPresidium will display only the latest five semantically versioned releases of your documentation.\n\nPresidium only supports numeric semantic versions.\n\nPresidium names the latest version as 'latest'. This means that if you have versions 1.0, 1.1, 1.2, 1.3, 1.5, you will see: latest, 1.5, 1.4, 1.3 and 1.2.\n\nKnown Issues\n\nThe versioning UI component is not yet responsive.\n\nA user cannot view versions by serving the documentation locally.\n\nTurning off versioning does not prevent access to the version if the url is known.\n\nCurrently, only publishing to Github pages is supported.\n\nIf the use of a CNAME is disabled, it is not removed from .versionswhen republished.\n","updated":"2018-02-27T12:16:15.970Z","roles":[]},{"id":"content/_tools/01-link-validation.md","title":"Link Validation","slug":"link-validation","url":"/tools/#link-validation","section":"Tools","category":"","content":"The link validation tool enables you to validate all the links in your site.\nThe tool indicates which links are valid, broken, and/or external, and provides a warning for potentially broken links.\n\nRun Link Validator\n\n\n\nOutput\n\nThe link validation tool produces the following output for each unique link found in your site:\n\nValid Links\n\n\n\nExternal Links\n\n\n\nBroken Links\n\n\n\nPotentially Broken Links\n\n\n\nKnown Issues\n\nThe link validation tool currently marks any assets from /media as BROKEN.\n","updated":"2018-02-27T12:16:15.973Z","roles":[]},{"id":"content/_support/Issues.md","title":"Issues","slug":"issues","url":"/support/#issues","section":"Support","category":"","content":"If you experience any issues with Presidium, please log an issue so that we can continue to improve the product.\n","updated":"2018-02-27T12:16:15.973Z","roles":[]},{"id":"content/_updates/96-v0.1.9.md","title":"v0.1.9","slug":"v0.1.9","url":"/updates/#v0.1.9","section":"Updates","category":"","content":"4 July 2017\n\nSummary\n\nGeneral improvements that include small bug fixes to Presidium and new documentation content.\n\nNew Content\n\nMarkdown\n\nNew Features\n\nTooltips\n\nLanding Page\n\npresidium-swagger - A Java-based tool built on top of Swagger2Markup that imports your API's Swagger into your documentation.\n\nSite Config\n\nIf you intend to use this release, make sure your site config is up to date with the latest config.\n\nBug Fixes\n\n39\n\n50\n","updated":"2018-02-27T12:16:15.976Z","roles":[]},{"id":"content/_updates/97-v0.1.8.md","title":"v0.1.8","slug":"v0.1.8","url":"/updates/#v0.1.8","section":"Updates","category":"","content":"20 June 2017\n\nSummary\n\nGeneral improvements include small bug fixes to Presidium and new documentation content.\n\nSite Config\n\nIf you intend to use this release, make sure your site config is up to date with the latest config.\n\nNew Content\n\nFeatures\n\nBenefits\n\nPlan Content Development\n\nDesign Documentation Structure\n\nDefine Learning Objectives\n\nInventory Existing Content\n\nUse Article Templates\n\nWriting Effective Articles\n\nBug Fixes\n\n\\#44\n\n\\#43\n","updated":"2018-02-27T12:16:15.985Z","roles":[]},{"id":"content/_updates/98-v0.1.7.md","title":"v0.1.7","slug":"v0.1.7","url":"/updates/#v0.1.7","section":"Updates","category":"","content":"13 June 2017\n\nSummary\n\nGeneral improvements and features that include support for Jsdoc ingestion and minor bug fixes.\n\nNew Features\n\nJsdoc Import: A node tool that imports Javascript comments into your documentation.\n\nBug Fixes\n\n\\#5\n","updated":"2018-02-27T12:16:15.990Z","roles":[]},{"id":"content/_updates/99-v0.1.6.md","title":"v0.1.6","slug":"v0.1.6","url":"/updates/#v0.1.6","section":"Updates","category":"","content":"6 June 2017\n\nSummary\n\nGeneral improvements and features that include support for semantic versioning, Javadoc ingestion, and link validation.\n\nNew Features\n\nSemantic Versioning: Adds support to publish and switch between different site versions\n\nJavadoc Import: Java doclet to import source code comments to Presidium\n\nLink validation: Tool to check for any broken links\n","updated":"2018-02-27T12:16:15.991Z","roles":[]},{"id":"content/_updates/license.md","title":"License","slug":"license","url":"/updates/#license","section":"Updates","category":"","content":"Presidium was created by SPAN Digital\n\n\n","updated":"2018-02-27T12:16:15.998Z","roles":[]},{"id":"content/_glossary/tooltips.md","title":"Tooltips","slug":"tooltips","url":"/glossary/#tooltips","section":"Glossary","category":"","content":"This is an example of a Glossary entry linked to from here.\n","updated":"2018-02-27T12:16:15.998Z","roles":[]}]