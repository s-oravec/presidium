[{"id":"content/_overview/01-features.md","title":"Features","slug":"features","url":"/docs/#features","section":"Overview","category":"","content":"Presidium is an open source software documentation management system for agile teams, and their users. \n\nPresidium is easy to install and configure, supports flexible content authoring and publishing workflows, and comes with a predefined set of article templates to get you started.  Using Presidium a team can; develop new content, rapidly re-purpose existing content, and re-use existing marked-up code (jsdoc, javadoc) and API specifications (Swagger). \n\nPresidium provides the features you need, while avoiding the bloat of many commercial solutions:\n\nAutomatic menus \n\nThe left navigation menu is dynamically created every time you publish your site. Various options are available for controlling navigation behavior.\n\nVersioning \n\nSupport for multiple versions of your documentation. Easily switch from one version to another without losing context.  \n\nMarkup Ingestion \n\nIngestion of markedup source code and API specs allow you to reuse existing documentation investments.\n\nFiltering by Role \n\nDefine user roles and filter site content by a specific selected role\n\nLink Checking \n\nMake sure your links actually go somewhere!\n\nArticle Status Tracking \n\nTrack the status of an article and manage simple authoring workflow. \n\nThemes \n\nEasily select and modify Bootswatch themes to meet your brand requirements. \n\nPresidium was created by SPAN Digital and is licensed under Apache 2.0\n","updated":"2017-06-27T07:57:36.308Z","roles":[]},{"id":"content/_overview/02-benefits.md","title":"Benefits","slug":"benefits","url":"/docs/#benefits","section":"Overview","category":"","content":"Easy Install\n\nPresidium uses Github pages to publish content. If you have access to github and Github pages is turned on for your site, then you have everything you need. Write your content, commit changes, and it's published automatically. It really is that easy. \n\nMicro-article based\n\nPresidium is built on sound theoretical strategies for developing learning content and managing knowledge assets. The core of this approach is the development of specific focused micro-articles that explain individual concepts. This splits the problem of content development into two parts.  \n\nDefining the site outline in terms of the concepts that must be documented and how they should be sequenced and presented. \n\nDeveloping the articles that each explain one specific concept and follow a standard template for ensure consistency. \n\nMicro-articles break the documentation development and maintenance process into achievable chunks that can be prioritized based on need. We have found it is possible to write and review an article in under 20 minutes. \n\nThis Presidium documentation site explains not only the Presidium software  but also best practices for writing your documentation.\n\nEasy Content Maintenance\n\nPresidium is designed specifically to make it easy to write AND maintain your documentation. Instead of one vast document presidium manages a directory structure of micro-articles. The directory structure maps to the sections of your site, while the articles are joined together to build the content of each section. New sections and sub-sections can be added just by creating a directory. Each section contains a sample article template that can be used as a starting point when creating new content. This site explains other best practices for writing articles. \n\nIf you know how to  maintain a codebase in a github repository, you already know how to maintain Presidium documentation.  Use whatever workflow your team already uses with github to manage the approval and publication process. Use Githubâ€™s features to handle merge conflicts and other issues just the same as you do for your source code. \n\nConfigurable Features\n\nPresidium is shipped pre-configured for software documentation. You can easily modify the suggested site structure and behavior.  We have found most teams only need to remove a few sections that are not relevant to their project. Presidium has several configurable features that can be turned on or off as needed.\n\nServerless\n\nPresidium uses github for both content management, and as a publication server. If you have access to github and github pages is turned on for your repository, then you have all you need to start publishing. There is no process of deploying a server or getting permission from some dark corner of the enterprise. All you need to do is commit the branch that contains your documentation and github pages, using Jekyll, will do the rest. Despite having no server we have packed enough features into the Presidium.js component to meet most teams needs. And, if you really need more features, Presidium is open source, we welcome contributions from the community. \n","updated":"2017-06-27T07:57:36.322Z","roles":[]},{"id":"content/_key-concepts/key-concepts.md","title":"Documentation Workflow","slug":"documentation-workflow","url":"/docs/key-concepts/#documentation-workflow","section":"Key Concepts","category":"","content":"Presidium provides workflows templates and tools for building and managing a static technical documentation site.\nAll user documentation for a system may be written in markdown and built into a static site using \nPresidium as illustrated:\n\nDocumentation Workflow\nHigh-level Workflow and Dependencies\n\nContent Owners\n\nWrite and structure their articles and user documentation in a git repo\n\nInclude media assets (images, attachments) as required\n\nInclude reference documentation sources as required\n\nConfigure and publish their site\n\nPresidium\n\nProvides:\n\nBase templates, styling and themes\n\nCommon UI components\n\nBuild Workflows via npm:\n\nImport\n\nBuild\n\nServe \n\nPublish\n\nVersion\n\nDependencies\n\nJekyll integration and workflows via npm\n\nReference documentation import:\n\nJavadoc\n\nSwagger (under development)\n\nJSDoc (under development)\n\nLinting and validation tools\n","updated":"2017-06-27T07:57:36.345Z","roles":[]},{"id":"content/_prerequisites/01-required-software.md","title":"Required Software","slug":"required-software","url":"/docs/prerequisites/#required-software","section":"Prerequisites","category":"","content":"The following tools are required to build and run your site locally:\n\nnpm v3.10+\n\nruby v2.1+\n\nbundler v1.14.3+\n\nPresidium uses:\n\nnpm to build, run and publish your site\n\nruby to run Jekyll \n\nbundler to manage Jekyll dependencies\n\nAll required dependencies are managed via npm scripts and are local to each site you create, so there is \nno need to install and configure Jekyll.\n","updated":"2017-06-27T07:57:36.355Z","roles":[]},{"id":"content/_prerequisites/02-environment-setup/01-osx.md","title":"OSX","slug":"osx","url":"/docs/prerequisites/local-environment-setup/#osx","section":"Prerequisites","category":"Local Environment Setup","content":"NPM\n\nInstall using the node package or nvm\n\nnode v6.10 (LTS)\n\nnpm v3.10\n\nRuby\n\nRequires ruby >= 2.1 available using homebrew:\n\n\n\nBundler\n\n\n","updated":"2017-06-27T07:57:36.358Z","roles":[]},{"id":"content/_prerequisites/02-environment-setup/02-debian.md","title":"Debian","slug":"debian","url":"/docs/prerequisites/local-environment-setup/#debian","section":"Prerequisites","category":"Local Environment Setup","content":"The following script may be used to provision a Debian based environment:\n\n\n","updated":"2017-06-27T07:57:36.359Z","roles":[]},{"id":"content/_getting-started/getting-started.md","title":"Setting up your First Site","slug":"setting-up-your-first-site","url":"/docs/getting-started/#setting-up-your-first-site","section":"Getting Started","category":"","content":"Create a New Site\n\nDownload and extract the sample template\n\nRun the following from your project directory to install required dependencies:\n\n\n\nIf you get an error, check that you have the following prerequisites installed on your environment:\n\nnpm v3.10+\n\nruby v2.1+\n\nbundler v1.14.3+\n\nRun Presidium\n\nTo start your site, run the following from your project folder:\n\n\n\nThis will build your site to dist/site and serve it locally on: http&#x3A;//localhost:4000/\n\nEdit Content\n\nOnce your site is up and running, you can start making changes to the following files and folders:\n\ncontent/ Content folder for all your articles\n\nmedia/ Media folder for static assets such as images, attachments or css\n\n\\_config.yml Site configuration properties\n\nUpdates to content, media or css can be made without having to restart the local server. \nStructural or changes to configuration currently require a server restart.\n\nPublish your Site\n\nThe simplest way to publish a github repository is to use Github Pages, but you can also host the generated site on any Web server.\n\nTo Github Pages\n\nTo publish using Github Pages, commit and push your site to a Github repository and run the following:\n\n\n\nThis will push your generated site to a gh-pages branch in your repository. You will need to \nenable gh-pages \nin your repository.\n\nAs a Static Site\n\nThe generated static site can be found in dist/site\n","updated":"2017-06-27T07:57:36.371Z","roles":[]},{"id":"content/_best-practices/01-plan-content-development.md","title":"Plan Content Development","slug":"plan-content-development","url":"/docs/best-practices/#plan-content-development","section":"Best Practices","category":"","content":"Before starting to write content it is best to spend some time anticipating what tasks you need to perform and making sure you have the time and resources to achieve your goals. \n\nWe have found that the following outline plan is useful for small and large projects alike.  \n\nDesign  site structure \n\nInventory existing content \n\nPlan the decomposition of existing content into articles \n\nMap the planned articles to your structure\n\nIdentify required new articles \n\nDecompose existing content into articles\n\nWrite new articles\n\nProof read and edit\n\nPublish  \n\nDiscussion\n\nYour most important task in planning your activities is to identify the scope of your documentation efforts. This is best started by understanding the needs of your audience. Presidium is preconfigured with standard sections commonly found in software documentation, these can be used to help guide your initial scoping efforts.\n","updated":"2017-06-27T07:57:36.389Z","roles":[]},{"id":"content/_best-practices/02-design-site-structure.md","title":"Design Documentation Structure","slug":"design-documentation-structure","url":"/docs/best-practices/#design-documentation-structure","section":"Best Practices","category":"","content":"Before starting to write content it is best to define the structure of your documentation. How many sections should it have?, what should each section cover?, should some sections have sub-sections. Answering these questions helps to scope the work ahead and define the content that needs to be found or written. While you should decide on the structure of your site at the start be prepared to change it as you gain a deeper understanding of your content. With Presidium it is easy to move artciles between directories.\n\nPresidium comes pre-configured with a standard menu structure that you can use to start scoping your documentation. You can add new sections to Presidum but we have found that the standard section are usually adequate. \n\nFirst Decide which of the pre-configured sections are not required for your content. \n\n\n\nDiscussion\n\nOnce you have identified the sections you want to use for your documentation, define the learning objectives for each section. Compile a comprehensive list of learning objectives. \n","updated":"2017-06-27T07:57:36.403Z","roles":[]},{"id":"content/_best-practices/03-define-learning-objectives.md","title":"Define Learning Objectives","slug":"define-learning-objectives","url":"/docs/best-practices/#define-learning-objectives","section":"Best Practices","category":"","content":"Think carefully about what it means to use your solution effectively. Try to define what your audience should know, and be able to do, once they have read your documentation. Create a list of these \"learning objectives\". Just like the stories used to define software, learning objectives can be written using a standard template.   \n\nAs a user of the solution I know a specific piece of information or can perform a specific task\n\nThis standard template can be used to create learning objectives like those below. In many cases your existing stories can be re-used as learning objectives with little or no alternation.\n\nAs a first time user of Presidium I can easily download, install, and run the latest version.\n\nAs a user of Presidium I know the value of defining learning objectives for developing comprehensive content.\n\nClearly articulated learning objectives ensure your content stays focused on comprehensive and coherent goals. In Presidium we advise you use learning objectives to help define the title and content of articles. Each learning objective frequently corresponds to one content article.   \n\nDiscussion\n\nDefine the knowledge and abilities you expect your target audience to already have before starting to read your documentation. Use these prerequisistes to avoid wasting time explaining things you expect them to already know. \n\nAs a user of Presidium I already know how to use git hub as a version control system.\n\nAs a user of Presdium I know what markdown is, I have used it before, and I know how to lookup details of the markdown syntax I may be unfamilar with.  \n","updated":"2017-06-27T07:57:36.415Z","roles":[]},{"id":"content/_best-practices/04-inventory-existing-content.md","title":"Inventory Existing Content","slug":"inventory-existing-content","url":"/docs/best-practices/#inventory-existing-content","section":"Best Practices","category":"","content":"When starting a documentation initiative it is advisable to review existing content. In most cases it is possible to identify  content that can be re-purposed. Content can be obtained from a variety of sources:  \n\nExisting software documentation\n\nWikis and message boards\n\nDesign documents \n\nWork tickets (Epics and Stories, Bugs)\n\nAPI specifications  \n\nREADME files\n\nCode comments and markup\n\nHelp files\n\nemails\n\nMeeting notes\n\nProject planning materials \n\nCompile a list of existing content sources and identify how each item could be decomposed or converted into an article. Identify where these articles fit in your documentation structure. \n\nDiscussion\n\nUnless someone has already created a comprehensive set of documentation that you can start from you will typically find that some areas have been well documented while others are poorly defined or even missing altogether. Expect to find duplicate and outdated content. Keep a list of the best documentation you have found for any learning objective.  \n","updated":"2017-06-27T07:57:36.425Z","roles":[]},{"id":"content/_best-practices/05-use-article-templates.md","title":"Use Article Templates","slug":"use-article-templates","url":"/docs/best-practices/#use-article-templates","section":"Best Practices","category":"","content":"Presdium is shipped with article templates for each of the pre-defined sections. The templates are  text documents containing instructions and markdown.  Below is the template for the best practices section. \n\n\n\nYou can modify the templates to meet your needs. \n\nDiscussion\n\nTemplates encourage consistency and provide a simple checklist that an author can use for inspiration. \n","updated":"2017-06-27T07:57:36.429Z","roles":[]},{"id":"content/_best-practices/06-write-effective-articles.md","title":"Writing Effective Articles","slug":"writing-effective-articles","url":"/docs/best-practices/#writing-effective-articles","section":"Best Practices","category":"","content":"Anyone can write great articles if they follow a few simple style guidelines \n\nMake sure the title explains what the article is about. The title will be used to construct the navigation menu, it will often be read seperated from the article body along side other article titles. Make sure the title makes sense in isolation and describes the essence of the article. Keep it simple and succinct, don't use humor or colloquialisms.  \n\nDiscussion\n\nTemplates encourage consistency and provide a simple checklist that an author can use for inspiration when writing new content. \n","updated":"2017-06-27T07:57:36.432Z","roles":[]},{"id":"content/_recipes/01-hosting-presidium/01-hosting-alternatives .md","title":"Hosting Alternatives","slug":"hosting-alternatives","url":"/docs/recipes/hosting-presidium/#hosting-alternatives","section":"Recipes","category":"Hosting Presidium","content":"Presidium can be hosted in various different configurations. \n\nHosted in a dedicated repo that only contains documentation \n\nHosted in a sub-folder of an existing repo\n\nHosted in a git sub-module of an existing repo \n\nall approaches are valid. A stand alone repo is simpler to configure and easier to manage independently from the code. Hosting Presdium in a /docs directory inside the a code repo keeps everything in one place and makes it easier to update the docs while changing the code. A sub-module is a way to gain the best of both worlds, but comes at the price of slightly increased complexity. \n","updated":"2017-06-27T07:57:36.437Z","roles":[]},{"id":"content/_recipes/01-hosting-presidium/02-hosting-in-dedicated-repo.md","title":"Hosting in an Dedicated Repo","slug":"hosting-in-an-dedicated-repo","url":"/docs/recipes/hosting-presidium/#hosting-in-an-dedicated-repo","section":"Recipes","category":"Hosting Presidium","content":"Presidium can be hosted in a dedicated repo. Follow the instructions in the getting started section and you will be guided to create a new repo dedicated to Presidium.  \n","updated":"2017-06-27T07:57:36.439Z","roles":[]},{"id":"content/_recipes/01-hosting-presidium/03-hosting-in-an-shared-repo.md","title":"Hosting in a Shared Repo","slug":"hosting-in-a-shared-repo","url":"/docs/recipes/hosting-presidium/#hosting-in-a-shared-repo","section":"Recipes","category":"Hosting Presidium","content":"Presidium does not have to be hosted in a repository of its own.  It can exist within a sub folder, e.g. /docs in your existing software project Repo.\n\nGetting Presidium\n\nThe easiest way to incorporate Presidium into your project is to get the latest archived version and uncompress it into your project's empty /docs folder.  If you wish to clone the project instead,\nbe sure to remove the .git folder from docs/ after cloning as your project repo will manage\nthe docs/ folder and not the presidium template repo.\n\nThe contents of your docs/ folder should look something like this:\n\n\n\nAdd the following to your project's .gitignore file:\n\n\n\nFrom this point onwards you can follow the getting started guide. The only difference is that your documentation root is /docs.\n","updated":"2017-06-27T07:57:36.447Z","roles":[]},{"id":"content/_recipes/01-hosting-presidium/04-hosting-as-a-sub-module.md","title":"Hosting as a Sub-module","slug":"hosting-as-a-sub-module","url":"/docs/recipes/hosting-presidium/#hosting-as-a-sub-module","section":"Recipes","category":"Hosting Presidium","content":"If you wish to keep your documentation stored in a separate repository, but still use it within your project, you can use git submodules:\n\n\n","updated":"2017-06-27T07:57:36.449Z","roles":[]},{"id":"content/_recipes/02-documentation-structure/00-directory-structure.md","title":"Directory Structure","slug":"directory-structure","url":"/docs/recipes/content-structure/#directory-structure","section":"Recipes","category":"Content Structure","content":"The structure of the site generated by Presidium follows the directory structure of the Presidium repository. Sections and articles are arranged in the operating system's default ordering of files and directories. Sections can be nested up to four levels deep although we recommend you stick to one or two levels of nesting, as too many levels makes it difficult to find content. \n\nThe following example demonstrates how you could order and organise files and directories using numeric prefixes:\n\n\n\nThe names of directories and files are used for sorting, they are generally not exposed in the generated site. To aid in editing and arranging your content we recommend the file name contain the title of the article and the directory name contain the name of the section.  \n\nThe title of a sub-section should be set by providing  an index.md file in the folder with the following front matter:\n\n\n\nIf no index file is provided then the directory name is used for the section name.\n","updated":"2017-06-27T07:57:36.456Z","roles":[]},{"id":"content/_recipes/02-documentation-structure/01-article-concatenation.md","title":"Article Concatenation","slug":"article-concatenation","url":"/docs/recipes/content-structure/#article-concatenation","section":"Recipes","category":"Content Structure","content":"When a user of Presdium selects a section from the left menu, all articles in that section are concatenated onto a single page. This allows readers to easily scroll through all articles in a section. We believe this is a benefit because adjacent articles in a section are usually closely related and the reader often benefits for discovering these closely related articles.  \n\nThis is behavoir is enabled by default, but can be disabled using the following site config:\n\n\n","updated":"2017-06-27T07:57:36.457Z","roles":[]},{"id":"content/_recipes/02-documentation-structure/02-exporting-articles.md","title":"Generating Article HTML","slug":"generating-article-html","url":"/docs/recipes/content-structure/#generating-article-html","section":"Recipes","category":"Content Structure","content":"It is sometimes useful to access just the article html, without the navigation menu or headers and footers. This allows articles to be easily embedded in other sites and systems. \n\nEach articles html may be generated as a seperate file when building a site.\nTo generated html for all articles in a section, the export-articles property of a section can be set in the site config:\n\n\n\nThe generated site will include html files for all articles in the glossary section: \n\n\n","updated":"2017-06-27T07:57:36.462Z","roles":[]},{"id":"content/_recipes/authors.md","title":"Authors","slug":"authors","url":"/docs/recipes/#authors","section":"Recipes","category":"","content":"Each article may include an author in the front matter:\n\n\n\nLinks to authors are optional and may be enabled by setting a base authors-url in the site config:\n\n\n\nTo hide or show authors on your generated site, \nsimply enable or disable the component in the site config:\n\n\n","updated":"2017-06-27T07:57:36.467Z","roles":[]},{"id":"content/_recipes/reference-documentation/00-reference-documentation.md","title":"Importing Documentation","slug":"importing-documentation","url":"/docs/recipes/reference-documentation/#importing-documentation","section":"Recipes","category":"Reference Documentation","content":"The reference section of Presidium should be reserved as a low-level reference for users.\nTypical components documented in the reference section may include a client library or API specification.\nThe process of importing documentation involves parsing a reference source and generating articles that are included in the generated site.\n\nWhere possible reference documentation should be generated to ensure that your documentation is in sync with the \nsystem being documented. \n\nPresidium will provide support for the following documentation sources:\n\njavadoc comments\n\njsdoc comments (under development)\n\nswagger api (under development)\n\nFor other sources that do not yet have an importer, documentation can be embedded into references.\n","updated":"2017-06-27T07:57:36.472Z","roles":[]},{"id":"content/_recipes/reference-documentation/01-javadoc.md","title":"Javadoc","slug":"javadoc","url":"/docs/recipes/reference-documentation/#javadoc","section":"Recipes","category":"Reference Documentation","content":"Java source code comments may be imported to Presidium using the Presidium Doclet implementation. \nImported documentation will be included in the menu and sitemap.\n\nTo import javadoc, you will need to use the presidium-javadoc package.\n\nAdd the presidium-javadoc dependency to your site's package.json.\n\nAdd a generation script that parses the provided &lt;src-path> directory and &lt;packages> and generates markdown in your content/\\_reference section.\n\nRun npm run import-javadoc-api whenever you need to update your source documentation\n\n\n\nThe following options are available to presidium-javadoc: \n\n\n\nAlternatively you can use the Doclet within an existing build workflow such as gradle using the javadoc-plugin.\n","updated":"2017-06-27T07:57:36.485Z","roles":[]},{"id":"content/_recipes/reference-documentation/02-jsdoc.md","title":"Jsdoc","slug":"jsdoc","url":"/docs/recipes/reference-documentation/#jsdoc","section":"Recipes","category":"Reference Documentation","content":"Based off of Jsdoc, Presidium offers a template-based tool, presidium-jsdoc, for importing Javascript comments into your Presidium documentation.\n\nTo use:\n\nAdd the presidium-jsdoc dependency to your site's package.json. Or run npm install --save presidium-jsdoc. \n\nAdd a script that invokes the tool.\n\nRun npm run import-jsdoc whenever you need to update your API documentation.\n\n\n\nExample:\n\n\n\nThe following options are available to presidium-jsdoc: \n\n\n","updated":"2017-06-27T07:57:36.493Z","roles":[]},{"id":"content/_recipes/reference-documentation/03-swagger.md","title":"Swagger","slug":"swagger","url":"/docs/recipes/reference-documentation/#swagger","section":"Recipes","category":"Reference Documentation","content":"Based off of Swagger2Markup, Presidium offers a Java-based tool, presidium-swagger, for importing your API's Swagger into your Presidium documentation.\n\nTo use:\n\nAdd the presidium-swagger dependency to your site's package.json. Or run npm install --save presidium-swagger.\n\nAdd a script that invokes the tool.\n\nRun npm run import-swagger whenever you need to update your API documentation.\n\n\n\nExample:\n\n\n\nThe following options are available to presidium-swagger:\n\n\n","updated":"2017-06-27T07:57:36.501Z","roles":[]},{"id":"content/_recipes/reference-documentation/04-embed.md","title":"Embed","slug":"embed","url":"/docs/recipes/reference-documentation/#embed","section":"Recipes","category":"Reference Documentation","content":"A fallback approach to import generated documentation is to embed documentation within an iframe.\nThis approach is not advised as items are not indexed or available on the main menu but \nwill work for certain cases where an importer is not yet available.\n\nWhere possible use a simple template when embedding documentation in an iframe\n\nTo included documentation in an iframe:\n1\\. Generate your static site documentation for your component\n1\\. Place the documentation within the /media folder so that it is statically served. \nThe Presidium convention is to place it under /media/import/{my-reference}\n1\\. Add a reference article to the reference section:\n\n\n\nYou can create multiple markdown files for different components as required.\n","updated":"2017-06-27T07:57:36.504Z","roles":[]},{"id":"content/_recipes/semantic-versioning.md","title":"Semantic Versioning","slug":"semantic-versioning","url":"/docs/recipes/#semantic-versioning","section":"Recipes","category":"","content":"Presidium supports semantic versioning of your documentation when publishing to Github pages.\n\nBranch Setup\n\nPresidium versioning relies on the use of the gh-pages branch to publish current and versioned documentation.\nIn order to use Presidium versioning, you will need to ensure you have a gh-pages branch set up in your repository. \nYou may skip these step if you already have a branch set up.\n\nChange the directory to the root of your project:\n\n\n\nIf the branch already exists (be sure you know what you are doing!), you can clean gh-pages and start again:\n\n\n\nCreate a new gh-pages branch with nothing on it:\n\n\n\nUpdate .gitignore\n\nPresidium uses a hidden folder as a staging area for publishing. To make sure you don't accidentally commit this run the following command:\n\n\n\nSet The Base Url & Turn On Versioning\n\nIn order to use Presidium versioning on gh-pages, you are required to use the base url of the repository. You must ensure that this is set in \\_config.yml in the root of your project:\n\n\n\nNote the lack of a trailing slash.\n\nUpdate Variables In \\_config.yml\n\nPresidum supports the use of simple variables in \\_config.yml. In order to use versioning you must make sure that any helper variables that include the base url of your site are defined using a ${...} variable. For example, this is incorrect:\n\n\n\nThis is correct:\n\n\n\nBe careful to not introduce circular dependencies with the use of variables.\n\nRunning The Tool\n\nTo publish a version:\n\n\n\nIf you want to publish the latest version:\n\n\n\nVersioning Conventions\n\nPresidium will display only the latest five semantically versioned releases of your documentation.\n\nPresidium supports only numeric semantic versions.\n\nPresidium names the latest version as 'latest', this means if you have 1.0, 1.1, 1.2, 1.3, 1.5, versions, then you will see: latest, 1.5, 1.4, 1.3 and 1.2.\n\nKnown Issues:\n\nVersioning UI component is not yet responsive.\n\nA user cannot view versions by serving the documentation locally.\n\nTurning off versioning does not prevent access to the version if the url is known.\n\nCurrently, only publishing to Github pages is supported.\n\nIf the use of a CNAME is disabled, it is not removed from .versions on a subsequent republish.\n","updated":"2017-06-27T07:57:36.526Z","roles":[]},{"id":"content/_recipes/statuses.md","title":"Statuses","slug":"statuses","url":"/docs/recipes/#statuses","section":"Recipes","category":"","content":"Each article may be assigned a status to track its lifecycle:\n\ndraft\n\nreview\n\npublished\n\nretired\n\nStatuses can be set in the site's front matter:\n\n\n\nTo enable or disable statuses from showing on your generated site, \nsimply enable or disable the following setting in the site config:\n\n\n","updated":"2017-06-27T07:57:36.529Z","roles":[]},{"id":"content/_recipes/themes.md","title":"Themes","slug":"themes","url":"/docs/recipes/#themes","section":"Recipes","category":"","content":"Presidium uses http&#x3A;//bootswatch.com/ for managing its themes.  If you wish to change the \ncurrent theme of your documentation, site, simply navigate to /media/css/\\_sass and edit the \\_variables.scss file:\n\n\n\nPresidium gives you the supported themes listed above. Uncomment the theme that you want (and comment the existing one).\nThen, if you called Presidium with npm start, it will pick up the change and (the hotloader) will update the \nstyles allowing you to refresh the browser window and view the new theme.\n\nNote that if you want a pure spacelab theme for example, you must remove the overrides as shown above ($brand-info ... etc).\n\nLogo\n\nThe default logo image is placed and loaded from /media/images/logo.png.  If you wish to update it, simply override \nthe existing file in the folder.  Its size ratio should be:\n\n260px Ã— 124px\n","updated":"2017-06-27T07:57:36.534Z","roles":[]},{"id":"content/_recipes/user roles.md","title":"User Roles","slug":"user-roles","url":"/docs/recipes/#user-roles","section":"Recipes","category":"","content":"Various roles can be added to a site to allow readers to filter by a target audience. \nArticles and menu items are filtered based on the selected role. \n\nThis is an optional feature that can be enabled by defining user roles in the site config\n\n\n\nIf a role is not specified, an article defaults to roles.all.\n\nArticles may have one or more roles defined in article front matter:\n\n\n","updated":"2017-06-27T07:57:36.536Z","roles":[]},{"id":"content/_tools/01-link-validation.md","title":"Link Validation","slug":"link-validation","url":"/docs/tools/#link-validation","section":"Tools","category":"","content":"A link validation tool is provided so that you can validate all the links in your site. \nThe tool will indicate which links are valid, broken and/or external and will provide a warning for potentially broken links.\n\nRun Link Validator\n\n\n\nOutput\n\nThe validator tool will produce the following output for each unique link found in your site:\n\nValid Links:\n\n\n\nExternal Links:\n\n\n\nBroken Links:\n\n\n\nPotentially Broken Links:\n\n\n","updated":"2017-06-27T07:57:36.539Z","roles":[]},{"id":"content/_support/Issues.md","title":"Issues","slug":"issues","url":"/docs/support/#issues","section":"Support","category":"","content":"If you experience any issues with Presidium, please log an issue so that we can continue to improve the product.\n","updated":"2017-06-27T07:57:36.544Z","roles":[]},{"id":"content/_updates/97-v0.1.8.md","title":"v0.1.8","slug":"v0.1.8","url":"/docs/updates/#v0.1.8","section":"Updates","category":"","content":"20 June 2017\n\nSummary\n\nGeneral improvements include small bugfixes to Presidium and new documentation content.\n\nSite Config\n\nIf you intend on using this release, ensure your site config is up to date with the latest config.\n\nNew Content\n\nFeatures\n\nBenefits\n\nPlan Content Development\n\nDesign Documentation Structure\n\nDefine Learning Objectives\n\nInventory Existing Content\n\nUse Article Templates\n\nWriting Effective Articles\n\nBug Fixes\n\n\\#44\n\n\\#43\n","updated":"2017-06-27T07:57:36.555Z","roles":[]},{"id":"content/_updates/98-v0.1.7.md","title":"v0.1.7","slug":"v0.1.7","url":"/docs/updates/#v0.1.7","section":"Updates","category":"","content":"13 June 2017\n\nSummary\n\nGeneral improvements and features that include support for Jsdoc ingestion and minor bug fixes.\n\nNew Features\n\nJsdoc Import: A node tool that imports Javascript comments into your documentation.\n\nBug Fixes\n\n\\#5\n","updated":"2017-06-27T07:57:36.556Z","roles":[]},{"id":"content/_updates/99-v0.1.6.md","title":"v0.1.6","slug":"v0.1.6","url":"/docs/updates/#v0.1.6","section":"Updates","category":"","content":"6 June 2017\n\nSummary\n\nGeneral improvements and features that include support for semantic versioning, Javadoc ingestion and link validation.\n\nNew Features\n\nSemantic Versioning: Add support to publish and switch between different site versions\n\nJavadoc Import: Java doclet to import source code comments to Presidium\n\nLink validation: Tool to check for any broken links\n","updated":"2017-06-27T07:57:36.558Z","roles":[]},{"id":"content/_updates/license.md","title":"License","slug":"license","url":"/docs/updates/#license","section":"Updates","category":"","content":"Presidium was created by SPAN Digital\n\n\n","updated":"2017-06-27T07:57:36.559Z","roles":[]}]