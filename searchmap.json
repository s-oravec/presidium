[{"id":"content/_overview/overview.md","title":"Presidium","slug":"presidium","url":"/#presidium","section":"Overview","category":"","content":"Presidium is a documentation framework that enforces industry best practices for documenting software systems. \nPresidium provides software teams with the tools to acquire, revise, categorize, utilize and evaluate small \ndocument fragments that get aggregated into a well structured static website. Presidium is based on familar tools already in use by many software development teams.\n\nGet started with your first site:\n\n\n\nPresidium was created by SPAN Digital and is licensed under Apache 2.0\n","updated":"2017-06-06T18:20:56.929Z","roles":[]},{"id":"content/_key-concepts/key-concepts.md","title":"Documentation Workflow","slug":"documentation-workflow","url":"/key-concepts/#documentation-workflow","section":"Key Concepts","category":"","content":"Presidium provides workflows templates and tools for building and managing a static technical documentation site.\nAll user documentation for a system may be written in markdown and built into a static site using \nPresidium as illustrated:\n\nDocumentation Workflow\nHigh-level Workflow and Dependencies\n\nContent Owners\n\nWrite and structure their articles and user documentation in a git repo\n\nInclude media assets (images, attachments) as required\n\nInclude reference documentation sources as required\n\nConfigure and publish their site\n\nPresidium\n\nProvides:\n\nBase templates, styling and themes\n\nCommon UI components\n\nBuild Workflows via npm:\n\nImport\n\nBuild\n\nServe \n\nPublish\n\nVersion\n\nDependencies\n\nJekyll integration and workflows via npm\n\nReference documentation import:\n\nJavadoc\n\nSwagger (under development)\n\nJSDoc (under development)\n\nLinting and validation tools\n","updated":"2017-06-06T18:20:56.949Z","roles":[]},{"id":"content/_prerequisites/01-requirements.md","title":"Required Software","slug":"required-software","url":"/prerequisites/#required-software","section":"Prerequisites","category":"","content":"The following tools are required to build and run your site locally:\n\nnpm v3.10+\n\nruby v2.1+\n\nbundler v1.14.3+\n\nPresidium uses:\n\nnpm to build, run and publish your site\n\nruby to run Jekyll \n\nbundler to manage Jekyll dependencies\n\nAll required dependencies are managed via npm scripts and are local to each site you create, so there is \nno need to install and configure Jekyll.\n","updated":"2017-06-06T18:20:56.952Z","roles":[]},{"id":"content/_prerequisites/02-environment-setup/01-osx.md","title":"OSX","slug":"osx","url":"/prerequisites/local-environment-setup/#osx","section":"Prerequisites","category":"Local Environment Setup","content":"NPM\n\nInstall using the node package or nvm\n\nnode v6.10 (LTS)\n\nnpm v3.10\n\nRuby\n\nRequires ruby >= 2.1 available using homebrew:\n\n\n\nBundler\n\n\n","updated":"2017-06-06T18:20:56.954Z","roles":[]},{"id":"content/_prerequisites/02-environment-setup/02-debian.md","title":"Debian","slug":"debian","url":"/prerequisites/local-environment-setup/#debian","section":"Prerequisites","category":"Local Environment Setup","content":"The following script may be used to provision a Debian based environment:\n\n\n","updated":"2017-06-06T18:20:56.954Z","roles":[]},{"id":"content/_getting-started/getting-started.md","title":"Setting up your First Site","slug":"setting-up-your-first-site","url":"/getting-started/#setting-up-your-first-site","section":"Getting Started","category":"","content":"Create a New Site\n\nDownload and extract the sample template\n\nRun the following from your project directory to install required dependencies:\n\n\n\nIf you get an error, check that you have the following prerequisites installed on your environment:\n\nnpm v3.10+\n\nruby v2.1+\n\nbundler v1.14.3+\n\nRun Presidium\n\nTo start your site, run the following from your project folder:\n\n\n\nThis will build your site to dist/site and serve it locally on: http&#x3A;//localhost:4000/\n\nEdit Content\n\nOnce your site is up and running, you can start making changes to the following files and folders:\n\ncontent/ Content folder for all your articles\n\nmedia/ Media folder for static assets such as images, attachments or css\n\n\\_config.yml Site configuration properties\n\nUpdates to content, media or css can be made without having to restart the local server. \nStructural or changes to configuration currently require a server restart.\n\nPublish your Site\n\nThe simplest way to publish a github repository is to use Github Pages, but you can also host the generated site on any Web server.\n\nTo Github Pages\n\nTo publish using Github Pages, commit and push your site to a Github repository and run the following:\n\n\n\nThis will push your generated site to a gh-pages branch in your repository. You will need to \nenable gh-pages \nin your repository.\n\nAs a Static Site\n\nThe generated static site can be found in dist/site\n","updated":"2017-06-06T18:20:56.962Z","roles":[]},{"id":"content/_recipes/authors.md","title":"Authors","slug":"authors","url":"/recipes/#authors","section":"Recipes","category":"","content":"Each article may include an author in the front matter:\n\n\n\nLinks to authors are optional and may be enabled by setting a base authors-url in the site config:\n\n\n\nTo hide or show authors on your generated site, \nsimply enable or disable the component in the site config:\n\n\n","updated":"2017-06-06T18:20:56.963Z","roles":[]},{"id":"content/_recipes/reference-documentation/00-reference-documentation.md","title":"Importing Documentation","slug":"importing-documentation","url":"/recipes/reference-documentation/#importing-documentation","section":"Recipes","category":"Reference Documentation","content":"The reference section of Presidium should be reserved as a low-level reference for users.\nTypical components documented in the reference section may include a client library or API specification.\nThe process of importing documentation involves parsing a reference source and generating articles that are included in the generated site.\n\nWhere possible reference documentation should be generated to ensure that your documentation is in sync with the \nsystem being documented. \n\nPresidium will provide support for the following documentation sources:\n\njavadoc comments\n\njsdoc comments (under development)\n\nswagger api (under development)\n\nFor other sources that do not yet have an importer, documentation can be embedded into references.\n","updated":"2017-06-06T18:20:56.968Z","roles":[]},{"id":"content/_recipes/reference-documentation/01-javadoc.md","title":"Javadoc","slug":"javadoc","url":"/recipes/reference-documentation/#javadoc","section":"Recipes","category":"Reference Documentation","content":"Java source code comments may be imported to Presidium using the Presidium Doclet implementation. \nImported documentation will be included in the menu and sitemap.\n\nTo import javadoc, you will need to use the presidium-javadoc package.\n\nAdd the presidium-javadoc dependency to your site's package.json.\n\nAdd a generation script that parses the provided &lt;src-path> directory and &lt;packages> and generates markdown in your content/\\_reference section.\n\nRun npm run import-javadoc-api whenever you need to update your source documentation\n\n\n\nThe following options are available to presidium-javadoc: \n\n\n\nAlternatively you can use the Doclet within an existing build workflow such as gradle using the javadoc-plugin.\n","updated":"2017-06-06T18:20:56.978Z","roles":[]},{"id":"content/_recipes/reference-documentation/02-embed.md","title":"Embed","slug":"embed","url":"/recipes/reference-documentation/#embed","section":"Recipes","category":"Reference Documentation","content":"A fallback approach to import generated documentation is to embed documentation within an iframe.\nThis approach is not advised as items are not indexed or available on the main menu but \nwill work for certain cases where an importer is not yet available.\n\nWhere possible use a simple template when embedding documentation in an iframe\n\nTo included documentation in an iframe:\n1\\. Generate your static site documentation for your component\n1\\. Place the documentation within the /media folder so that it is statically served. \nThe Presidium convention is to place it under /media/import/{my-reference}\n1\\. Add a reference article to the reference section:\n\n\n\nYou can create multiple markdown files for different components as required.\n","updated":"2017-06-06T18:20:56.988Z","roles":[]},{"id":"content/_recipes/semantic-versioning.md","title":"Semantic Versioning","slug":"semantic-versioning","url":"/recipes/#semantic-versioning","section":"Recipes","category":"","content":"Presidium supports semantic versioning of your documentation when publishing to Github pages.\n\nBranch Setup\n\nPresidium versioning relies on the use of the gh-pages branch to publish current and versioned documentation.\nIn order to use Presidium versioning, you will need to ensure you have a gh-pages branch set up in your repository. \nYou may skip these step if you already have a branch set up.\n\nChange the directory to the root of your project:\n\n\n\nIf the branch already exists (be sure you know what you are doing!), you can clean gh-pages and start again:\n\n\n\nCreate a new gh-pages branch with nothing on it:\n\n\n\nUpdate .gitignore\n\nPresidium uses a hidden folder as a staging area for publishing. To make sure you don't accidentally commit this run the following command:\n\n\n\nSet The Base Url & Turn On Versioning\n\nIn order to use Presidium versioning on gh-pages, you are required to use the base url of the repository. You must ensure that this is set in \\_config.yml in the root of your project:\n\n\n\nNote the lack of a trailing slash.\n\nUpdate Variables In \\_config.yml\n\nPresidum supports the use of simple variables in \\_config.yml. In order to use versioning you must make sure that any helper variables that include the base url of your site are defined using a ${...} variable. For example, this is incorrect:\n\n\n\nThis is correct:\n\n\n\nBe careful to not introduce circular dependencies with the use of variables.\n\nRunning The Tool\n\nTo publish a version:\n\n\n\nIf you want to publish the latest version:\n\n\n\nVersioning Conventions\n\nPresidium will display only the latest five semantically versioned releases of your documentation.\n\nPresidium supports only numeric semantic versions.\n\nPresidium names the latest version as 'latest', this means if you have 1.0, 1.1, 1.2, 1.3, 1.5, versions, then you will see: latest, 1.5, 1.4, 1.3 and 1.2.\n\nKnown Issues:\n\nVersioning UI component is not yet responsive.\n\nA user cannot view versions by serving the documentation locally.\n\nTurning off versioning does not prevent access to the version if the url is known.\n\nCurrently, only publishing to Github pages is supported.\n\nIf the use of a CNAME is disabled, it is not removed from .versions on a subsequent republish.\n\nWhen running Presidium locally the following error is reported: ../versions.json' not found. on the console.\n","updated":"2017-06-06T18:20:57.006Z","roles":[]},{"id":"content/_recipes/statuses.md","title":"Statuses","slug":"statuses","url":"/recipes/#statuses","section":"Recipes","category":"","content":"Each article may be assigned a status to track its lifecycle:\n\ndraft\n\nreview\n\npublished\n\nretired\n\nStatuses can be set in the site's front matter:\n\n\n\nTo enable or disable statuses from showing on your generated site, \nsimply enable or disable the following setting in the site config:\n\n\n","updated":"2017-06-06T18:20:57.009Z","roles":[]},{"id":"content/_recipes/structure/00-site-structure.md","title":"Site Structure","slug":"site-structure","url":"/recipes/structure/#site-structure","section":"Recipes","category":"Structure","content":"Articles follow the natural alphabetic ordering of files and folders which may be grouped in sub-sections.\n\nThe following example demonstrates how you could order and organise articles and sub-sections using numeric prefixes:\n\n\n\nThe title of a sub-section is derived from the folder name, but may be set by providing \nan index.md file in the folder with the following front matter:\n\n\n\nA maximum of four levels is supported by the main menu.\n","updated":"2017-06-06T18:20:57.014Z","roles":[]},{"id":"content/_recipes/structure/01-nested-articles.md","title":"Nested Articles","slug":"nested-articles","url":"/recipes/structure/#nested-articles","section":"Recipes","category":"Structure","content":"All articles in a section are nested on a single page. \nThis allows readers to scroll and read through all articles in a section on a single page.\nAs a reader navigates down the menu tree, only articles within nested sub-sections are shown. \n\nThis is enabled by default, but can be disabled using the following site config:\n\n\n","updated":"2017-06-06T18:20:57.015Z","roles":[]},{"id":"content/_recipes/structure/02-exporting-articles.md","title":"Exporting Articles","slug":"exporting-articles","url":"/recipes/structure/#exporting-articles","section":"Recipes","category":"Structure","content":"The raw html of an article may be exported when building a site.\nTo export the generated html for all articles in a section, the export-articles property of a section can be set in the site config:\n\n\n\nThis generated static site will include html files for all articles: \n\n\n","updated":"2017-06-06T18:20:57.017Z","roles":[]},{"id":"content/_recipes/themes.md","title":"Themes","slug":"themes","url":"/recipes/#themes","section":"Recipes","category":"","content":"Presidium uses http&#x3A;//bootswatch.com/ for managing its themes.  If you wish to change the \ncurrent theme of your documentation, site, simply navigate to /media/css/\\_sass and edit the \\_variables.scss file:\n\n\n\nPresidium gives you the supported themes listed above. Uncomment the theme that you want (and comment the existing one).\nThen, if you called Presidium with npm start, it will pick up the change and (the hotloader) will update the \nstyles allowing you to refresh the browser window and view the new theme.\n\nNote that if you want a pure spacelab theme for example, you must remove the overrides as shown above ($brand-info ... etc).\n\nLogo\n\nThe default logo image is placed and loaded from /media/images/logo.png.  If you wish to update it, simply override \nthe existing file in the folder.  Its size ratio should be:\n\n260px × 124px\n","updated":"2017-06-06T18:20:57.025Z","roles":[]},{"id":"content/_recipes/user roles.md","title":"User Roles","slug":"user-roles","url":"/recipes/#user-roles","section":"Recipes","category":"","content":"Various roles can be added to a site to allow readers to filter by a target audience. \nArticles and menu items are filtered based on the selected role. \n\nThis is an optional feature that can be enabled by defining user roles in the site config\n\n\n\nIf a role is not specified, an article defaults to roles.all.\n\nArticles may have one or more roles defined in article front matter:\n\n\n","updated":"2017-06-06T18:20:57.028Z","roles":[]},{"id":"content/_tools/01-link-validation.md","title":"Link Validation","slug":"link-validation","url":"/tools/#link-validation","section":"Tools","category":"","content":"A link validation tool is provided so that you can validate all the links in your site. \nThe tool will indicate which links are valid, broken and/or external and will provide a warning for potentially broken links.\n\nRun Link Validator\n\n\n\nOutput\n\nThe validator tool will produce the following output for each unique link found in your site:\n\nValid Links:\n\n\n\nExternal Links:\n\n\n\nBroken Links:\n\n\n\nPotentially Broken Links:\n\n\n","updated":"2017-06-06T18:20:57.036Z","roles":[]},{"id":"content/_support/Issues.md","title":"Issues","slug":"issues","url":"/support/#issues","section":"Support","category":"","content":"If you experience any issues with Presidium, please log an issue so that we can continue to improve the product.\n","updated":"2017-06-06T18:20:57.037Z","roles":[]},{"id":"content/_updates/99-v0.1.6.md","title":"v0.1.6","slug":"v0.1.6","url":"/updates/#v0.1.6","section":"Updates","category":"","content":"6 June 2017\n\nSummary\n\nGeneral improvements and features that include support for semantic versioning, Javadoc ingestion and link validation.\n\nNew Features\n\nSemantic Versioning: Add support to publish and switch between different site versions\n\nJavadoc Import: Java doclet to import source code comments to Presidium\n\nLink validation: Tool to check for any broken links\n","updated":"2017-06-06T18:20:57.039Z","roles":[]},{"id":"content/_updates/license.md","title":"License","slug":"license","url":"/updates/#license","section":"Updates","category":"","content":"Presidium was created by SPAN Digital\n\n\n","updated":"2017-06-06T18:20:57.040Z","roles":[]}]